<?php
include_once 'php/database.php'; // Include the database.php file
include "php/google-auth.php";

// Establish database connection
global $connect_kuberkosh_db;

$userId = $_SESSION['user_id']; // Works only if a user session exists

// Retrieve banks data
$banks = getRegisteredBanksIdAndName($connect_kuberkosh_db);

// Retrieve branches data
$branches = getBranchesIdLocationIfscAndFKregBankId($connect_kuberkosh_db);

// Fetch Wallet details
$walletDetails = fetchWalletDetails($connect_kuberkosh_db, $userId);

// Fetch bank_user_id from Bank Table
$bankUserId = getBankUserId( $connect_kuberkosh_db, $userId);
if (empty($bankUserId)) {
    $setBank_user_id = "INSERT INTO Bank (user_id) VALUES ($userId)";
    $stmt = $connect_kuberkosh_db->prepare($setBank_user_id);
    $stmt->execute();

    $bankUserId = getBankUserId( $connect_kuberkosh_db, $userId);
}

// Fetch bank account id for the specified bank User ID
$bankAccountId = getBankAccountId($connect_kuberkosh_db, $bankUserId);

//TMP TMP TMP TMP TMP TMP TMP TMP TMP TMP 
$bankAccountDetails = getBankAccountDetails($connect_kuberkosh_db, $bankUserId);



// Check if bank account details are available
if (!empty($bankAccountDetails)) {
    $html = '<ul>'; // Start unordered list
    foreach ($bankAccountDetails as $account) {
        $bankName = $account['bank_name'];
        $accountNumber = $account['account_number'];
        $ifscCode = $account['ifsc_code'];

        // Construct list item with bank details
        $html .= "<li>Bank Name: $bankName, Account Number: $accountNumber, IFSC Code: $ifscCode</li>";
    }
    $html .= '</ul>'; // End unordered list
} else {
    // No bank account details found
    $html = '<p>No bank account details available.</p>';
}

// echo '<script>alert("bankAccountId: ' . $bankAccountId . '");</script>';             // Debugging


// Encode data to JSON
$jsonBanks = json_encode($banks);
$jsonBranches = json_encode($branches);
$jsonBankAccountId = json_encode($bankAccountId);
$jsonWalletDetails = json_encode($walletDetails);
$jsonBankUserId = json_encode($bankUserId);
$jsonBankAccountDetails = json_encode($bankAccountDetails);


// Output bank details as JSON
// header('Content-Type: application/json');
// echo json_encode($bankAccountId);


// Check if the bank branch form is submitted
if (isset($_POST['submitBankSettings'])) {
    // Get the selected bank and branch from the form
    $selectedBankId = $_POST['regBank_id'];
    $selectedBranch = $_POST['branch'];
    $enteredAccountNumber = $_POST['acno'];


    // Get the IFSC code based on the selected bank and branch
    $ifsc = getIFSC($connect_kuberkosh_db, $selectedBankId, $selectedBranch);

    $bankName = getBankName($connect_kuberkosh_db, $selectedBankId);
    echo '<script>alert("IFSC code:'. $bankName .'")</script>';

    // Update the bank_accounts table with the retrieved IFSC code
    $sql_updateIFSC = "INSERT INTO bank_accounts (bank_user_id, account_number, ifsc_code, bank_name, account_balance) VALUES ('$bankUserId', '$enteredAccountNumber', '$ifsc', '$bankName','0')";
    if (mysqli_query($connect_kuberkosh_db, $sql_updateIFSC)) {
        echo '';
        echo "updated IFSC: " . $userId;
    } else {
        echo "Error updating IFSC: " . mysqli_error($connect_kuberkosh_db);
    }

    // If default account is empty, set the first bank account as default
    $defaultBankAccountId = getDefaultBankAccountId($connect_kuberkosh_db, $userId);
    if (empty($defaultBankAccountId)) {
        // Update the Bank table with the entered account number as the default account
        
        $bankAccountId = getBankAccountId($connect_kuberkosh_db, $bankUserId);
        // echo '<script>alert("bankAccountId 2nd time: ' . $bankAccountId . '");</script>';                   //Debugging
        updateDefaultBankAccountId($connect_kuberkosh_db, $bankAccountId, $userId);
    }
}





// Conditional Statements to check if wallet address exists in db
// if exists add wallet detail to $jsonWalletDetails = json_encode($walletDetails)
// else create wallet address from email id.

// Conditional Statements to check if wallet address exists in db
if (!empty($walletDetails['wallet_address'])) {
    // Wallet address exists in the database
    $jsonWalletDetails = json_encode($walletDetails);
} else {
    // Create wallet address from email
    $email = $_SESSION['email_address'];
    $parts = explode('@', $email);
    $walletAddress = $parts[0] . '@kkosh'; // Replace everything after @ with "kkosh"
    
    // Function to insert this new wallet address into the database
    insertWalletAddress($connect_kuberkosh_db, $userId, $walletAddress);

    // Constructing a new array containing the wallet details
    $newWalletDetails = array(
        'wallet_id' => null, // Assuming this will be auto-generated by the database
        'user_id' => $userId,
        'wallet_address' => $walletAddress,
        'wallet_pin' => null // Yet to be handelled 
    );

    // Encode the new wallet details as JSON
    $jsonWalletDetails = json_encode($newWalletDetails);
}





?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings Page</title>
    <script src="js/settings.js"></script>

    <style>
        /* Add your CSS styles here */
        /* Navbar styles */
        /* Navbar styles */
        /* Navbar styles */
        /* Navbar styles */
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: #333;
            color: white;
            flex-wrap: wrap;
            /* Allow items to wrap onto multiple lines */
            margin-left: 200px;
            /* Adjust this according to your sidebar width */
            padding: 20px;
        }

        .navbar .navbar-links {
            display: flex;
            flex-wrap: wrap;
            /* Allow items to wrap onto multiple lines */
            justify-content: center;
            /* Center items horizontally */
        }

        .navbar a,
        .navbar button {
            margin: 0 10px;
            color: white;
            /* Set link text color to white */
            text-decoration: none;
            /* Remove underline */
        }

        .navbar button {
            margin: 0 10px;
            color: black;
            /* Set link text color to white */
            text-decoration: none;
            /* Remove underline */
        }

        /* Profile section */
        .navbar .profile {
            display: flex;
            align-items: center;
        }




        /* Side left page styles */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            bottom: 0;
            width: 200px;
            background-color: #f0f0f0;
            padding-top: 60px;
            /* Adjust this according to your navbar height */
        }

        .sidebar ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .sidebar li {
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }

        .sidebar li:last-child {
            border-bottom: none;
        }

        .sidebar li a {
            color: #333;
            text-decoration: none;
        }

        .sidebar li a:hover {
            background-color: #ddd;
        }

        /* Main content styles */
        .content {
            margin-left: 200px;
            /* Adjust this according to your sidebar width */
            padding: 20px;

        }

        /* Style the tab */
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }

        /* Style the buttons that are used to open the tab content */
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
        }

        /* Change background color of buttons on hover */
        .tab button:hover {
            background-color: #ddd;
        }

        /* Create an active/current tablink class */
        .tab button.active {
            background-color: #ccc;
        }

        /* Style the tab content */
        .tabcontent {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
        }
    </style>
</head>

<body>

    <!-- Navbar -->
    <div class="navbar">
        <div class="logo">
            KuberKosh
        </div>
        <div class="navbar-links">
            <a href="#">About</a>
            <a href="#">Features</a>
            <a href="#">Support</a>
            <button>Language</button>
            <div class="profile">
                <!-- <span>Name</span> -->
                <?php
                echo '<span>' . $_SESSION["first_name"] . ' ' . $_SESSION['last_name'] . '</span>';

                echo '<img src="' . $_SESSION['profile_picture'] . '" class="img-responsive img-circle img-thumbnail" />';
                ?>
                <!-- <img src="profile-picture.jpg" alt="Profile Picture" style="width: 40px; height: 40px; border-radius: 50%;"> -->
            </div>
        </div>
    </div>

    <!-- Side left page -->
    <div class="sidebar">
        <ul>
            <li><a href="http://localhost/index.php?dash">Dashboard</a></li>
            <li><a href="http://localhost/index.php?send">Send Money</a></li>
            <li><a href="#">Receive Money</a></li>
            <li><a href="#">Add Money</a></li>
            <li><a href="#">Withdraw Money</a></li>
            <li><a href="#">Transactions</a></li>
            <li><a href="#">Profile</a></li>
            <li><a href="http://localhost/index.php?settings#">Settings</a></li>
        </ul>
    </div>

    <!-- Main content -->
    <!-- Tab links -->
    <div class="content">

        <div class="tab">
            <button class="tablinks" onclick="showSettingsDetails(event, 'userDetails')" id="defaultOpen">User
                Detials</button>
            <button class="tablinks" onclick="showSettingsDetails(event, 'bankSettings')">Bank Settings</button>
            <button class="tablinks" onclick="showSettingsDetails(event, 'walletSettings')">Wallet Settings</button>
            <button class="tablinks" onclick="showSettingsDetails(event, 'changePassword')">Change Password</button>
            <button class="tablinks" onclick="showSettingsDetails(event, 'manage2FA')">Manage 2FA</button>

        </div>

        <!-- Tab content -->
        <div id="userDetails" class="tabcontent">
            <h3>User Details</h3>
            <p>User details will be here</p>
        </div>

        <div id="bankSettings" class="tabcontent">
            <h3>Linked Accounts</h3>

            <div id="LinkedAccounts">
                <!-- Bank details will be populated here dynamically -->
            </div>

            <h3>Link New Bank to KuberKosh</h3>

            <form method="post" action="">
                <div id="selectIFSC">
                    <p>Select your Bank name and Bank Branch:</p>
                    <select id='bankSelect' name="regBank_id">
                    </select>

                    <select id='branchSelect' name="branch">
                    </select>
                    <input type="text" name="ifsc" id="ifscInput" placeholder="Enter IFSC Manually">
                </div>
                <div id="selectACNO">
                    <p>Enter your bank account number:</p>
                    <input type="text" name="acno" id="acnoInput" placeholder="Enter Bank Account Number">
                </div>
                <input type="submit" name="submitBankSettings" value="Submit">
            </form>
        </div>

        <div id="walletSettings" class="tabcontent">
            <p id="walletAddress"></p>
            <button id="changeWalletAddressBtn">Change Wallet Address</button>
            <form id="changeWalletAddressForm" style="display: none;">
                <input type="text" id="inputNewWalletAddress" placeholder="Enter new wallet address">
                <button type="submit">Submit</button>
            </form>

            <p id="walletPIN"></p>
            <button id="changeWalletPINBtn">Change Wallet PIN</button>
            <form id="changeWalletPINForm" style="display: none;">
                <input type="password" id="inputCurrentPIN" placeholder="Enter current wallet PIN"><br>
                <input type="password" id="inputNewPIN" placeholder="Enter new wallet PIN"><br>
                <input type="password" id="inputConfirmNewPIN" placeholder="Confirm new wallet PIN"><br>
                <button type="submit">Submit</button>
            </form>

        </div>


        <div id="changePassword" class="tabcontent">
            <h3>changePassword</h3>
            <p>changePassword details will be here</p>
        </div>

        <div id="manage2FA" class="tabcontent">
            <h3>manage2FA</h3>
            <p>manage2FA will be here</p>
        </div>

    </div>





    <script>

        document.getElementById("defaultOpen").click();


        // Bank Settings Tab   Bank Settings Tab   Bank Settings Tab   Bank Settings Tab   Bank Settings Tab   Bank Settings Tab   Bank Settings Tab   Bank Settings Tab   Bank Settings Tab   Bank Settings Tab   
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //

        <?php
        echo "var banks = $jsonBanks; \n";
        echo "var branches = $jsonBranches; \n";
        echo "var userId = $userId; \n"
        ?>

        function showSettingsDetails(evt, settingsName) {
            if (settingsName === "bankSettings") {
                loadBanks();
            }
            // Declare all variables
            var i, tabcontent, tablinks;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the button that opened the tab

            document.getElementById(settingsName).style.display = "block";
            evt.currentTarget.className += " active";
        }

        function loadBanks() {
            var select = document.getElementById("bankSelect");
            select.onchange = updateBranches;

            // Add default "Select Bank" option
            select.options[0] = new Option("Select Bank", "");
            // select.options[0].disabled = true;
            // select.options[0].selected = true;

            for (var i = 0; i < banks.length; i++) {
                select.options[i + 1] = new Option(banks[i].val, banks[i].regBank_id);
            }
        }

        function updateBranches() {
            var bankSelect = this;
            var bankid = this.value;


            var branchSelect = document.getElementById("branchSelect");
            branchSelect.options.length = 0; //delete all options if any present

            // Add default "Select Location" option
            branchSelect.options[0] = new Option("Select Location", "");
            // branchSelect.options[0].disabled = true;
            // branchSelect.options[0].selected = true;

            for (var i = 0; i < branches[bankid].length; i++) {
                branchSelect.options[i + 1] = new Option(branches[bankid][i].val, branches[bankid][i].branch_id);
            }
        }


        // Get the JSON string containing bank details and Parse the JSON string to JavaScript object
        // var bankAccountId = <//?php echo json_encode($bankAccountId); ?>;
        var bankAccountId = <?php echo $jsonBankAccountId; ?>;
        var bankUserId = <?php echo $jsonBankUserId; ?>;
        var bankAccountDetails = <?php echo $jsonBankAccountDetails; ?>;


        // Select the div where Linked bank account details will be displayed
        var linkedAccountsElement = document.getElementById("LinkedAccounts");
        linkedAccountsElement.innerHTML = "<?php echo addslashes($html); ?>";









        // Wallet Settings Tab   Wallet Settings Tab   Wallet Settings Tab   Wallet Settings Tab   Wallet Settings Tab   Wallet Settings Tab   Wallet Settings Tab   
        //
        //
        //
        //
        //
        //
        //
        //
        //
        //
        // Parse the JSON data
        var walletDetails = JSON.parse('<?php echo $jsonWalletDetails; ?>');

        // Get the wallet address from the parsed JSON
        var walletAddress = walletDetails.wallet_address;


        // As the wallet details are stored in a variable called walletDetails
        var walletAddressElement = document.getElementById('walletAddress');
        walletAddressElement.textContent = 'Wallet address: ' + walletDetails.wallet_address;


        // Get elements
        // var walletAddressElement = document.getElementById('walletAddress');
        var changeWalletAddressBtn = document.getElementById('changeWalletAddressBtn');
        var changeWalletAddressForm = document.getElementById('changeWalletAddressForm');
        var newWalletAddressInput = document.getElementById('inputNewWalletAddress');

        // Display current wallet address
        walletAddressElement.textContent = 'Wallet address: ' + walletDetails.wallet_address;

        // Show change wallet form on button click
        changeWalletAddressBtn.addEventListener('click', function() {
            changeWalletAddressForm.style.display = 'block';
        });

        // Handle form submission to change the wallet address
        changeWalletAddressForm.addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent form submission

            // Get new wallet address from input
            var walletAddress = newWalletAddressInput.value.trim();

            // Client-side validation
            if (!walletAddress) {
                alert('Please enter a new wallet address');
                return;
            }

            // Server-side validation via AJAX
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'php/ajaxCheckWalletAddress.php'); 
            xhr.setRequestHeader('Content-Type', 'application/json');
            
            var dataToSend = JSON.stringify({ walletAddress: walletAddress });
            alert('Data being sent to server: ' + dataToSend); // Debugging: Log data being sent to server
            xhr.send(dataToSend);
            
            xhr.onload = function() 
            {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    alert('Response from server: ' + JSON.stringify(response)); // Debugging: Log response from server
                    if (response.valid) {
                        // Valid wallet address, proceed to update database
                        updateWalletAddress(walletAddress, userId);
                        alert('updated');
                    } else {
                        alert('The provided wallet address is not available or already exists in the database');
                    }
                } else {
                    alert('Error occurred while checking wallet address. Please try again.');
                }
            };
            

        });

        // Function to update wallet address in the database
        function updateWalletAddress(inputNewWalletAddress, userId) {
            // AJAX request to update wallet address in the database
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/php/ajaxUpdateWalletAddress.php');     // i have no idea why response is 404 if /php/ is not added.
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onload = function() {
                if (xhr.status === 200) {
                    // Wallet address updated successfully
                    var response = JSON.parse(xhr.responseText);
                    if (response.success) {
                        walletAddressElement.textContent = 'Wallet address: ' + inputNewWalletAddress;
                        changeWalletAddressForm.style.display = 'none';
                        newWalletAddressInput.value = '';
                        alert('Wallet address updated successfully');
                    } else {
                        alert('Failed to update wallet address. Please try again.');
                    }
                }
                else {
                    alert('Error occurred while updating wallet address. Please try again.');
                }
            };
            xhr.send(JSON.stringify({ inputNewWalletAddress: inputNewWalletAddress, userId: userId}));
        }


    // JavaScript code to handle setting or changing wallet PIN functionality

    document.addEventListener('DOMContentLoaded', function() {
    var changeWalletPINBtn = document.getElementById('changeWalletPINBtn');
    var changeWalletPINForm = document.getElementById('changeWalletPINForm');

    // Get wallet details from JSON
    var walletDetails = <?php echo $jsonWalletDetails; ?>;

    // Check if wallet PIN is null
    var walletPIN = walletDetails.wallet_pin;
    if (walletPIN === null) {
        // Wallet PIN is null, show form to set new PIN
        changeWalletPINBtn.textContent = 'Set Wallet PIN';
        createSetPINForm();
    } else {
        // Wallet PIN exists, show form to change PIN
        changeWalletPINBtn.textContent = 'Change Wallet PIN';
        createChangePINForm();
    }

    // Function to create form for setting new PIN
    function createSetPINForm() {
        changeWalletPINForm.innerHTML = `
            <input type="password" id="inputNewPIN" placeholder="Enter new wallet PIN"><br>
            <input type="password" id="inputConfirmNewPIN" placeholder="Confirm new wallet PIN"><br>
            <button type="submit">Submit</button>
        `;
        changeWalletPINForm.style.display = 'none';
        changeWalletPINBtn.addEventListener('click', function() {
            changeWalletPINForm.style.display = 'block';
        });
    }

    // Function to create form for changing existing PIN
    function createChangePINForm() {
        changeWalletPINForm.innerHTML = `
            <input type="password" id="inputCurrentPIN" placeholder="Enter current wallet PIN"><br>
            <input type="password" id="inputNewPIN" placeholder="Enter new wallet PIN"><br>
            <input type="password" id="inputConfirmNewPIN" placeholder="Confirm new wallet PIN"><br>
            <button type="submit">Submit</button>
        `;
        changeWalletPINForm.style.display = 'none';
        changeWalletPINBtn.addEventListener('click', function() {
            changeWalletPINForm.style.display = 'block';
        });
    }

    // Handle form submission to set or change the wallet PIN
    changeWalletPINForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent form submission

        // Retrieve input values
        var currentPIN = document.getElementById('inputCurrentPIN') ? document.getElementById('inputCurrentPIN').value.trim() : '';
        var newPIN = document.getElementById('inputNewPIN').value.trim();
        var confirmNewPIN = document.getElementById('inputConfirmNewPIN').value.trim();

        // Perform client-side validation
        if (currentPIN && (!newPIN || !confirmNewPIN)) {
            alert('All fields are required.');
            return;
        }

        // Perform client-side validation for new PIN
        if (newPIN !== confirmNewPIN) {
            alert('New PIN and Confirm New PIN do not match.');
            return;
        }

        // AJAX request to set or change wallet PIN
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/php/updateWalletPIN.php');
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.onload = function() {
            if (xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                alert(response.message);
                if (response.success) {
                    // Reset form and hide it
                    changeWalletPINForm.reset();
                    changeWalletPINForm.style.display = 'none';
                }
            } else {
                alert('Error occurred while updating wallet PIN. Please try again.');
            }
        };
        // Send the request with form data
        // var formData = 'currentPIN=' + encodeURIComponent(currentPIN) +
        //                 '&newPIN=' + encodeURIComponent(newPIN) +
        //                 '&confirmNewPIN=' + encodeURIComponent(confirmNewPIN);
        // xhr.send(formData);

        xhr.send(JSON.stringify({ currentPIN: currentPIN, newPIN: newPIN, confirmNewPIN: confirmNewPIN, userId: userId}));

    });
});




        
    </script>
</body>

</html>